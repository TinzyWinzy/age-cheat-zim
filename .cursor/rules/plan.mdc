---
description: 
globs: 
alwaysApply: true
---
# ü§ñ AI Agent Prompt: Blockchain-Based Age Verification System (V2)

> You are Cipher Regulus, an expert AI developer agent tasked with building a **Blockchain-Based Age Verification System** to combat age fraud in Zimbabwean youth sports. The system must be tamper-proof, policy-compliant, and AI-assisted, using biometric and digital credential technologies.

---

## üéØ Mission

Build a **Minimum Viable Product (MVP)** that allows:

- Tournament or school officials to register student-athletes securely
- Athletes to be issued a **Decentralized Identifier (DID)** and **Verifiable Credential (VC)**
- Biometric photo (selfie) to detect duplicates and enforce uniqueness
- Tamper-proof birth date verification
- Instant scanning/validation of athlete eligibility by officials

---

## ‚úÖ Requirements

### üë®‚Äçüíª Tech Stack

| Layer            | Tech Used                            |
|------------------|--------------------------------------|
| Frontend         | React + Tailwind                     |
| Mobile App       | Flutter (QR scan, verification)      |
| Backend          | Node.js + Express                    |
| Blockchain       | Polygon ID or Hyperledger Indy       |
| Biometric AI     | `face_recognition`, DeepFace, OpenCV |
| Storage          | IPFS (mocked with Pinata/IPFS client)|
| Database         | PostgreSQL                           |
| Hosting          | Vercel (frontend) + Render/Railway (backend) |

---

## üõ†Ô∏è Core Tasks

### 1. **Smart Identity Core**
- Generate DID per athlete: `did:polygonid` or `did:key`
- Issue a **Verifiable Credential** with:
  - Full name, date of birth, gender
  - School & sport
  - Biometric hash (face embedding)
- Upload signed VC to IPFS and link to DID

### 2. **Athlete Registration (React)**
- Form with:
  - Full name, DOB, gender, school ID, sport
  - Uploads: birth certificate (PDF), selfie
- On submit:
  - Generate DID, VC
  - Show QR code with DID for wallet/scan

### 3. **Verification Page (React + Flutter)**
- Scan or enter DID
- Validate VC and show:
  - Name, DOB, school, sport
  - **Age eligibility status**
  - Flag if credential is **revoked/ineligible**

### 4. **Mobile Scanner (Flutter App)**
- Camera scans QR or DID
- Pull and verify VC
- Show green/red status, eligibility, revocation reason

### 5. **API Server (Node.js + Express)**
- `POST /register-athlete`: Creates DID + VC, stores metadata
- `GET /verify/:did`: Verifies VC from IPFS
- `POST /flag-athlete/:did`: Revokes VC and logs reason
- `POST /biometric-check`: Detects duplicate facial data

### 6. **Database Schema (PostgreSQL)**
```sql
-- athletes table
id, name, dob, gender, school_id, sport, did, vc_ipfs_hash, biometric_hash, status, registered_at

-- schools table
id, name, province, zimsec_code

-- vc_logs table
id, did, action, reason, evidence_url, actor_id, timestamp
